<?php

namespace GFPDF\Plugins\BulkGenerator;

use League\Flysystem\FileNotFoundException;
use League\Flysystem\Memory\MemoryAdapter;

class EnhancedMemoryAdapter extends MemoryAdapter {
	public function createDir( $dirname, \League\Flysystem\Config $config ) {
		if ( ! $this->hasPathPrefix( $dirname ) ) {
			$dirname = $this->applyPathPrefix( $dirname );
		}

		return parent::createDir( $dirname, $config ); // TODO: Change the autogenerated stub
	}

	public function write( $path, $contents, \League\Flysystem\Config $config ) {
		if ( ! $this->hasPathPrefix( $path ) ) {
			$path = $this->applyPathPrefix( $path );
		}

		return parent::write( $path, $contents, $config ); // TODO: Change the autogenerated stub
	}

	public function has( $path ) {
		if ( ! $this->hasPathPrefix( $path ) ) {
			$path = rtrim( $this->applyPathPrefix( $path ), '/' );
		}

		return isset( $this->storage[ $path ] );
	}

	public function read( $path ) {
		if ( ! $this->hasPathPrefix( $path ) ) {
			$path = $this->applyPathPrefix( $path );
		}

		if ( ! isset( $this->storage[ $path ] ) ) {
			throw new FileNotFoundException( 'Not found' );
		}

		return parent::read( $path ); // TODO: Change the autogenerated stub
	}

	/**
	 * @var string|null path prefix
	 */
	protected $pathPrefix;

	/**
	 * @var string
	 */
	protected $pathSeparator = '/';

	/**
	 * Set the path prefix.
	 *
	 * @param string $prefix
	 *
	 * @return void
	 */
	public function setPathPrefix( $prefix ) {
		$prefix = (string) $prefix;

		if ( $prefix === '' ) {
			$this->pathPrefix = null;

			return;
		}

		$this->pathPrefix = rtrim( $prefix, '\\/' ) . $this->pathSeparator;
	}

	/**
	 * Get the path prefix.
	 *
	 * @return string|null path prefix or null if pathPrefix is empty
	 */
	public function getPathPrefix() {
		return $this->pathPrefix;
	}

	/**
	 * Prefix a path.
	 *
	 * @param string $path
	 *
	 * @return string prefixed path
	 */
	public function applyPathPrefix( $path ) {
		return $this->getPathPrefix() . ltrim( $path, '\\/' );
	}

	/**
	 * Remove a path prefix.
	 *
	 * @param string $path
	 *
	 * @return string path without the prefix
	 */
	public function removePathPrefix( $path ) {
		return substr( $path, strlen( $this->getPathPrefix() ) );
	}

	/**
	 * Check if the path is already prefixed
	 *
	 * @param string $path
	 *
	 * @return bool
	 */
	public function hasPathPrefix( $path ) {
		$prefix = $this->getPathPrefix();

		if ( empty( $prefix ) || empty( $path ) ) {
			return true;
		}

		return strpos( $path . $this->pathSeparator, $this->getPathPrefix() ) === 0;
	}
}