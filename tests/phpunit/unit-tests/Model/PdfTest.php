<?php

namespace GFPDF\Plugins\BulkGenerator\Model;

use GFPDF\Plugins\BulkGenerator\Exceptions\FilesystemError;
use GFPDF\Plugins\BulkGenerator\Exceptions\PdfGenerationError;
use GFPDF\Plugins\BulkGenerator\Utility\FilesystemHelper;
use League\Flysystem\Filesystem;
use League\Flysystem\Memory\MemoryAdapter;

class PdfTest extends \WP_UnitTestCase {

	protected $pdf;
	protected $filesystem;

	private $form_id;
	private $entry;

	public function setUp() {
		$this->entry = $this->create_entry();

		$this->pdf        = new Pdf( $this->entry['form_id'], '5e7bfc55b6ec9' );
		$this->filesystem = new Filesystem( new MemoryAdapter() );

		parent::setUp(); // TODO: Change the autogenerated stub
	}

	protected function create_entry() {
		$form_id = \GFAPI::add_form( json_decode( file_get_contents( __DIR__ . '/../../json/sample.json' ), true ) );

		$entry_id = \GFAPI::add_entry( [
			'form_id'        => $form_id,
			'created_by'     => $this->factory->user->create(),
			'date_created'   => '2020-02-01 01:30:00',
			'payment_status' => 'Paid',
			'currency'       => 'USD',
			'1'              => 'Sample',
		] );

		return \GFAPI::get_entry( $entry_id );
	}

	public function test_fetch_exemption() {
		$this->pdf->fetch();
	}

	public function test_has_setting() {
		$this->assertTrue( true );
	}

	public function test_get_setting() {

	}

	public function test_get_all_settings() {

	}

	public function test_evaluate_active() {

	}

	public function test_evaluate_conditional_logic() {

	}

	/**
	 * @throws PdfGenerationError
	 * @throws \GFPDF\Plugins\BulkGenerator\Exceptions\InvalidPdfId
	 */
	public function test_generate_get_path() {
		$pdf_path = [
			'output_path' => 'C:/laragon/www/gravitypdf-dev/wp-content/plugins/gravity-pdf-bulk-generator/tmp/wordpress/wp-content/uploads/PDF_EXTENDED_TEMPLATES/tmp/1061/Zadani.pdf',
		];

		$this->config();
		$this->pdf->fetch()
		          ->generate( $this->entry['id'] );
		$this->assertSame( $pdf_path, $this->pdf->get_path() );
	}

	public function test_get_path() {

	}

	public function test_put() {

	}

	public function test_fetch_pdf_settings() {
		$this->assertNotEmpty( $this->pdf->get_all_settings() );
		$this->assertTrue( $this->pdf->has_setting( 'active' ) );
		$this->assertNotEmpty( $this->pdf->evaluate_active() );
		$this->assertNotEmpty( $this->pdf->evaluate_conditional_logic( $this->entry ) );

		$this->assertNotEmpty( $this->pdf->get_path() );
		$this->assertNotEmpty( $this->pdf->put( $this->filesystem, '\'/\'' ) );

	}

	public function config() {
		add_filter( 'gfpdf_mpdf_class_config', function( $config ) {
			$config['mode']          = 'c';
			$config['biDirectional'] = false;

			return $config;
		} );
	}

}
